/**
 * 
 */
package commInfra;
//Include the Dropbox SDK.
import com.dropbox.core.*;

import java.io.*;
import java.util.Locale;

/**
 * @author PhaniShankar
 *
 */
public class DropBoxHandler {

	/**
	 * Class responsible for integrating with drop box account and fetching config file 
	 * @throws IOException 
	 * @throws DbxException 
	 */
	
	private String configRevision;
	private String accessToken;
	public DropBoxHandler(ConfigurationManger cm) throws IOException, DbxException{
        final String APP_KEY = "y3ev365bxnoimm7";
        final String APP_SECRET = "3xv4faj1zm50h9u";

        DbxAppInfo appInfo = new DbxAppInfo(APP_KEY, APP_SECRET);

        DbxRequestConfig config = new DbxRequestConfig(
            "JavaTutorial/1.0", Locale.getDefault().toString());
        DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(config, appInfo);
        
        /* Check if we already have an access token */
        File f = new File("DbxAccessToken.txt");
        if(!f.exists() || !f.isFile()) { 
        	/* Note: portions of this code are influenced by examples provided in drop box API
        	 * document. [https://www.dropbox.com/developers-v1/core/start/java] */
            /* Access token not present. Create a new one */
            // Have the user sign in and authorize your app.
            String authorizeUrl = webAuth.start();
            System.out.println("1. Go to: " + authorizeUrl);
            System.out.println("2. Click \"Allow\" (you might have to log in first)");
            System.out.println("3. Copy the authorization code.");
            String code = new BufferedReader(new InputStreamReader(System.in)).readLine().trim();
            
            // exchange the code recieved from user for an access token
            DbxAuthFinish authFinish = webAuth.finish(code);
            accessToken = authFinish.accessToken;
            
            PrintWriter writer = new PrintWriter("DbxAccessToken.txt");
            writer.println(accessToken);
            writer.close();        
        }
        else{
        	BufferedReader br = new BufferedReader(new FileReader("DbxAccessToken.txt"));
        	accessToken = br.readLine();
        }
        
        DbxClient client = new DbxClient(config, accessToken);
        //System.out.println("Linked account: " + client.getAccountInfo().displayName);
        
        DbxEntry entry = client.getMetadata(cm.configFile);
        if (entry == null) {
            System.out.println("No file or folder at that path.");
            throw new DbxException("File Not found");
        } else {
            //System.out.print(entry.toStringMultiline());
        }
        DbxEntry.File fileMetadata = entry.asFile();
        configRevision = fileMetadata.rev;
        
        FileOutputStream outputStream = new FileOutputStream(cm.localConfigFile);    
        try {
            DbxEntry.File downloadedFile = client.getFile(cm.configFile, null,
                outputStream);
            System.out.println("Downloaded initial file");
        }
        finally {
            outputStream.close();
        }
	}
	
	boolean checkForUpdates(ConfigurationManger cm) throws DbxException, IOException{
		boolean isFileUpdated = false;
        DbxRequestConfig config = new DbxRequestConfig(
                "JavaTutorial/1.0", Locale.getDefault().toString());
        
        DbxClient client = new DbxClient(config, accessToken);
        //System.out.println("Linked account: " + client.getAccountInfo().displayName);
        
        DbxEntry entry = client.getMetadata(cm.configFile);
        if (entry == null) {
            System.out.println("No file or folder at that path.");
            // Don't throw an exception. Instead return. We can fall back to 
            // local copy that we have
            return isFileUpdated;
        } else {
            //System.out.print(entry.toStringMultiline());
        }
        DbxEntry.File fileMetadata = entry.asFile();
        
        if (false == configRevision.equals(fileMetadata.rev)){
        	/* New revision available. Download it */
            FileOutputStream outputStream = new FileOutputStream(cm.localConfigFile);    
            try {
                DbxEntry.File downloadedFile = client.getFile(cm.configFile, null,
                    outputStream);
                //System.out.println("Downloaded new update");
                isFileUpdated = true;
            }
            finally {
                outputStream.close();
            }
        }
       return isFileUpdated; 
	}
	/**
	 * @param args
	 * @throws InterruptedException 
	 */
	/*
	public static void main(String[] args) throws InterruptedException {
		/*TODO pass the name of process (like alice,bob etc,) to append to config file created
		 * to avoid multiple application instances trying to access the same file name*/
	/*
		try {
			DropBoxHandler DbxHandle = new DropBoxHandler();
			Thread.sleep(50000);
			DbxHandle.checkForUpdates();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DbxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}*/
}
