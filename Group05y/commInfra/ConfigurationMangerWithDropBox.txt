/**
 * 
 */
package commInfra;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;

import com.dropbox.core.DbxException;

/**
 * @author PhaniShankar
 *
 */
public class ConfigurationManger {
	Map<String,List> configDict;
	String sharedConfigFile;
	String processName;
	String localConfigFile;
	DropBoxHandler DBxHandler;
	private static final boolean USE_DROPBOX = false;
	/**
	 * @throws IOException 
	 * @throws DbxException 
	 * 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public ConfigurationManger(String configFile, String processName) throws IOException, DbxException {
		Yaml yaml = new Yaml();
		this.sharedConfigFile = configFile;
		this.processName = processName;
		this.localConfigFile = processName+"_"+ (configFile.substring(configFile.lastIndexOf('/') + 1));
		System.out.println("sharedConfigFile :" + sharedConfigFile + " localConfigFile:" + localConfigFile);
		try {
			this.DBxHandler = new DropBoxHandler(this);
		} catch (DbxException e1) {
			System.out.println("Dbx download failed.");
			// TODO Auto-generated catch block
			e1.printStackTrace();
			throw e1;
		}
		
		try {
			InputStream input = new FileInputStream(new File(localConfigFile));
			this.configDict = (Map<String,List>)yaml.load(input);
			//System.out.println(configDict);		
			input.close();
		} catch (FileNotFoundException e) {
			System.out.println("Configuration File not Found. Initialization failed");
			e.printStackTrace();
			throw e;
		}
	}
	
	public synchronized Map<String,List> checkForUpdates() throws IOException{
		Yaml yaml = new Yaml();
		try {
			this.DBxHandler.checkForUpdates(this);
		} catch (DbxException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			System.out.println("Failed to fetch updated version of configuration from drop box. Use the old one.");
		}
		try {
			/* Check if modified time is after last read time, then only re-read the file */
			InputStream input = new FileInputStream(new File(localConfigFile));
			Map<String,List> newConfigDict = (Map<String,List>)yaml.load(input);
			/* Update only the send and receive rules. Configuration should not be changed */
			this.configDict.put("sendRules", newConfigDict.get("sendRules"));
			this.configDict.put("receiveRules", newConfigDict.get("receiveRules"));
			//System.out.println(configDict);	
			input.close();
		} catch (FileNotFoundException e) {
			System.out.println("Configuration File not Found. Update failed");
			e.printStackTrace();
		}
		return configDict;
	}
	/**
	 * @param args
	 * @throws IOException 
	 * @throws InterruptedException 
	 */
/*	public static void main(String[] args) throws IOException, InterruptedException {
		System.out.println("Initial Config");
		ConfigurationManger cm = new ConfigurationManger("config_file.txt");
		//Thread.sleep(50000);
		//System.out.println("First Update Config");
		//cm.getConfigUpdates("config_file.txt");
		//Thread.sleep(50000);
		//System.out.println("Second Update Config");
		//cm.getConfigUpdates("config_file.txt");
	}*/
}
